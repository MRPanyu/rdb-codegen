package @{config.basePackage};

import java.persistent.*;

@Table(name = "@{table.tableName}")
@SupressWarning("serial")
public class ${table.ext.className} implements java.io.Serializable {
@if{table.primaryKey != null && table.primaryKey.columnNames.size() > 1}
	private @{table.ext.className}Id @{table.ext.classNameCamel}Id;
@end{}@foreach{column : table.columns}@if{!column.primaryKey || table.primaryKey.columnNames.size() == 1}
	/** @{column.comment == null ? column.columnName : column.comment} */
	private @{column.ext.propertyType} @{column.ext.propertyName};
@end{}@end{}@foreach{foreignKey : table.foreignKeys}
	private @{foreignKey.ext.referenceTable.ext.className} @{foreignKey.ext.referenceTable.ext.classNameCamel};
@end{}@foreach{referer : table.ext.referers}
	private java.util.List<@{referer.ext.className}> @{referer.ext.classNameCamel}List = new java.util.ArrayList<@{referer.ext.className}>();
@end{}@if{table.primaryKey != null && table.primaryKey.columnNames.size() > 1}
	@EmbededId
	public @{table.ext.className}Id get@{table.ext.className}Id() {
		return @{table.ext.classNameCamel}Id;
	}
	
	public void set@{table.ext.className}Id(@{table.ext.className}Id @{table.ext.classNameCamel}Id) {
		this.@{table.ext.classNameCamel}Id = @{table.ext.classNameCamel}Id;
	}
@end{}@foreach{column : table.columns}@if{!column.primaryKey || table.primaryKey.columnNames.size() == 1}
	/** @{column.comment == null ? column.name : column.comment} */
	@if{column.primaryKey}@Id
	@end{}@if{column.ext.propertyType == "java.util.Date"}@Temporal(TemporalType.TIMESTAMP)
	@end{}@Column(name = "@{column.columnName}")
	public @{column.ext.propertyType} get@{column.ext.propertyNamePascal}() {
		return @{column.ext.propertyName};
	}
	
	/** @{column.comment == null ? column.columnName : column.comment} */
	public void set@{column.ext.propertyNamePascal}(@{column.ext.propertyType} @{column.ext.propertyName}) {
		this.@{column.ext.propertyName} = @{column.ext.propertyName};
	}
@end{}@end{}@foreach{foreignKey : table.foreignKeys}
	@ManyToOne(fetch = FetchType.LAZY)
	@if{foreignKey.columnNames.size() == 1}@JoinColumn(name = "@{foreignKey.columnNames[0]}", nullable = false, insertable = false, updatable = false)@else{}@JoinColumns(@foreach{columnName : foreignKey.columnNames}
		@JoinColumn(name = "@{columnName}", nullable = false, insertable = false, updatable = false)
	@end{})@end{}
	public @{foreignKey.ext.referenceTable.ext.className} get@{foreignKey.ext.referenceTable.ext.className}() {
		return @{foreignKey.ext.referenceTable.ext.classNameCamel};
	}
	
	public void set@{foreignKey.ext.referenceTable.ext.className}(@{foreignKey.ext.referenceTable.ext.className} @{foreignKey.ext.referenceTable.ext.classNameCamel}) {
		this.@{foreignKey.ext.referenceTable.ext.classNameCamel} = @{foreignKey.ext.referenceTable.ext.classNameCamel};
	}
@end{}@foreach{referer : table.ext.referers}
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "@{table.ext.classNameCamel}")
	public java.util.List<@{referer.ext.className}> get@{referer.ext.className}() {
		return this.@{referer.ext.classNameCamel}List;
	}
	
	public void set@{referer.ext.className}(java.util.List<@{referer.ext.className}> @{referer.ext.classNameCamel}List) {
		this.@{referer.ext.classNameCamel}List = @{referer.ext.classNameCamel}List;
	}
@end{}
}